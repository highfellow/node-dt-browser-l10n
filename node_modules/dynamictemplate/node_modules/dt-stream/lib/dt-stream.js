(function() {
  var EVENTS, Entry, OrderedEmitter, Stream, StreamAdapter, attrStr, prettify, streamify, _ref;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Stream = require('stream').Stream;

  OrderedEmitter = require('ordered-emitter');

  _ref = require('./util'), prettify = _ref.prettify, attrStr = _ref.attrStr;

  EVENTS = ['add', 'close', 'end', 'attr', 'text', 'raw', 'data'];

  Entry = (function() {

    function Entry(el, parent) {
      var _ref2, _ref3, _ref4, _ref5;
      var _this = this;
      this.parent = parent;
      this.release = __bind(this.release, this);
      this.order = new OrderedEmitter({
        span: true
      });
      this.released = false;
      this.isnext = false;
      this.children = 0;
      this.order.on('entry', function(_arg) {
        var job;
        job = _arg.job;
        return typeof job === "function" ? job() : void 0;
      });
      if ((_ref2 = this.parent) != null) {
        _ref2._stream.write(function() {
          if (_this.children) _this.release();
          return _this.isnext = true;
        });
      }
      this.idx = (_ref3 = (_ref4 = this.parent) != null ? _ref4._stream.children : void 0) != null ? _ref3 : -1;
      if ((_ref5 = this.parent) != null) _ref5._stream.children++;
      el.ready(function() {
        var _ref6;
        return (_ref6 = _this.parent) != null ? _ref6._stream.emit('close', {
          order: _this.idx + 1
        }) : void 0;
      });
    }

    Entry.prototype.emit = function() {
      var _ref2;
      return (_ref2 = this.order).emit.apply(_ref2, arguments);
    };

    Entry.prototype.write = function(job) {
      if (this.children && this.isnext) this.release();
      return this.emit('entry', {
        job: job,
        order: ++this.children
      });
    };

    Entry.prototype.release = function() {
      if (!this.released) {
        this.emit('release', {
          order: 0
        });
      }
      return this.released = true;
    };

    return Entry;

  })();

  StreamAdapter = (function() {

    function StreamAdapter(template, opts) {
      var _base, _ref2, _ref3, _ref4;
      this.template = template;
      if (opts == null) opts = {};
      this.close = __bind(this.close, this);
      this.builder = (_ref2 = this.template.xml) != null ? _ref2 : this.template;
      this.stream = (_ref3 = opts.stream) != null ? _ref3 : new Stream;
      if ((_ref4 = (_base = this.stream).readable) == null) _base.readable = true;
      this.opened_tags = 0;
      this.initialize();
    }

    StreamAdapter.prototype.initialize = function() {
      this.template.stream = this.stream;
      this.builder._stream = new Entry(this.builder);
      this.builder._stream.release();
      this.listen();
      return this.template.register('ready', function(tag, next) {
        if (tag._stream_ready === true) {
          return next(tag);
        } else {
          return tag._stream_ready = function() {
            return next(tag);
          };
        }
      });
    };

    StreamAdapter.prototype.listen = function() {
      var _this = this;
      return EVENTS.forEach(function(event) {
        return _this.template.on(event, _this["on" + event].bind(_this));
      });
    };

    StreamAdapter.prototype.write = function(data) {
      if (data) return this.stream.emit('data', data);
    };

    StreamAdapter.prototype.close = function() {
      this.builder.closed = true;
      return this.stream.emit('end');
    };

    StreamAdapter.prototype.onadd = function(parent, el) {
      var _this = this;
      el._stream = new Entry(el, parent);
      this.opened_tags++;
      el._stream.write(function() {
        if (el === el.builder) return;
        if (el.closed === 'self') {
          return _this.write(prettify(el, "<" + el.name + (attrStr(el.attrs)) + "/>"));
        } else {
          return _this.write(prettify(el, "<" + el.name + (attrStr(el.attrs)) + ">"));
        }
      });
      return el.ready(function() {
        _this.opened_tags--;
        if (_this.opened_tags === 0) {
          if (typeof _this.closed === "function") _this.closed();
          return _this.closed = true;
        }
      });
    };

    StreamAdapter.prototype.onclose = function(el) {
      var _this = this;
      return el._stream.write(function() {
        if (!(el.closed === 'self' || el === el.builder)) {
          _this.write(prettify(el, "</" + el.name + ">"));
        }
        if (typeof el._stream_ready === "function") el._stream_ready();
        return el._stream_ready = true;
      });
    };

    StreamAdapter.prototype.ondata = function(el, data) {
      var _this = this;
      return el._stream.write(function() {
        return _this.write(data);
      });
    };

    StreamAdapter.prototype.ontext = function(el, text) {
      var _this = this;
      return el._stream.write(function() {
        return _this.write(prettify(el, text));
      });
    };

    StreamAdapter.prototype.onraw = function(el, html) {
      var _this = this;
      return el._stream.write(function() {
        return _this.write(html);
      });
    };

    StreamAdapter.prototype.onattr = function(el, key, value) {
      if (!el.isempty) return;
      return console.warn("attributes of " + (el.toString()) + " don't change anymore");
    };

    StreamAdapter.prototype.onend = function() {
      if ((this.closed != null) && this.opened_tags === 0) {
        return this.close();
      } else {
        this.builder.closed = 'pending';
        return this.closed = this.close;
      }
    };

    return StreamAdapter;

  })();

  streamify = function(tpl, opts) {
    new StreamAdapter(tpl, opts);
    return tpl;
  };

  streamify.Adapter = StreamAdapter;

  module.exports = streamify;

  if (process.title === 'browser') {
    (function() {
      if (this.dynamictemplate != null) {
        return this.dynamictemplate.streamify = streamify;
      } else {
        return this.dynamictemplate = {
          streamify: streamify
        };
      }
    }).call(window);
  }

}).call(this);
