(function() {
  var Callback, CancelableCallbacks, DeferredCallbacks, removed;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Callback = (function() {

    function Callback() {
      this.call = __bind(this.call, this);      this.callback = null;
      this.that = null;
    }

    Callback.prototype.use = function(callback) {
      this.callback = callback;
      return this;
    };

    Callback.prototype.replace = function(that) {
      this.that = that;
      return this;
    };

    Callback.prototype.call = function() {
      var _ref;
      if (this.that != null) {
        return (_ref = this.callback) != null ? _ref.apply(this.that, arguments) : void 0;
      }
    };

    return Callback;

  })();

  CancelableCallbacks = (function() {

    function CancelableCallbacks(canceled) {
      this.canceled = canceled != null ? canceled : false;
      this.call = __bind(this.call, this);
      this.callbacks = [];
    }

    CancelableCallbacks.prototype.cancel = function() {
      return this.canceled = true;
    };

    CancelableCallbacks.prototype.reset = function() {
      return this.canceled = false;
    };

    CancelableCallbacks.prototype.call = function(callback) {
      var _this = this;
      return function() {
        if (_this.canceled) {
          return _this.callbacks.push(callback);
        } else {
          return typeof callback === "function" ? callback.apply(null, arguments) : void 0;
        }
      };
    };

    return CancelableCallbacks;

  })();

  DeferredCallbacks = (function() {

    function DeferredCallbacks() {
      this.call = __bind(this.call, this);      this.reset();
    }

    DeferredCallbacks.prototype.reset = function() {
      this.callbacks = [];
      this.allowed = null;
      return this.done = false;
    };

    DeferredCallbacks.prototype.complete = function() {
      this.callbacks = null;
      this.allowed = null;
      return this.done = true;
    };

    DeferredCallbacks.prototype.callback = function() {
      var callback;
      var _this = this;
      if (this.done) return (function() {});
      callback = function() {
        var cb, _ref;
        if (callback === _this.allowed) {
          while ((cb = (_ref = _this.callbacks) != null ? _ref.shift() : void 0) != null) {
            if (typeof cb === "function") cb.apply(null, arguments);
          }
          return _this.complete();
        }
      };
      this.allowed = callback;
      return callback;
    };

    DeferredCallbacks.prototype.call = function(callback) {
      if (this.done) return typeof callback === "function" ? callback() : void 0;
      return this.callbacks.push(callback);
    };

    return DeferredCallbacks;

  })();

  removed = function(el) {
    return !(el != null) || el.closed === "removed";
  };

  module.exports = {
    Callback: Callback,
    CancelableCallbacks: CancelableCallbacks,
    DeferredCallbacks: DeferredCallbacks,
    removed: removed
  };

}).call(this);
