(function() {
  var DefaultBuilder, EVENTS, EventEmitter, Template, aliases, doctype, ff, pp, schema, self_closing, _ref;
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; }, __slice = Array.prototype.slice;

  EventEmitter = require('events').EventEmitter;

  DefaultBuilder = require('asyncxml').Builder;

  _ref = require('./schema'), schema = _ref.schema, self_closing = _ref.self_closing;

  doctype = require('./doctype').doctype;

  aliases = require('./alias').aliases;

  EVENTS = ['new', 'add', 'show', 'hide', 'attr', 'text', 'raw', 'remove', 'replace', 'data', 'close', 'end'];

  pp = function(proto, name) {
    proto[name] = function() {
      var _ref2;
      return this.tag.apply(this, (_ref2 = [name]).concat.apply(_ref2, arguments));
    };
    return proto["$" + name] = function() {
      var _ref2;
      return this.$tag.apply(this, (_ref2 = [name]).concat.apply(_ref2, arguments));
    };
  };

  ff = function(proto, tags) {
    var tagname, _i, _len;
    for (_i = 0, _len = tags.length; _i < _len; _i++) {
      tagname = tags[_i];
      if (tagname) pp(proto, tagname);
    }
  };

  Template = (function() {

    __extends(Template, EventEmitter);

    function Template(opts, template) {
      var Builder, ExtendedBuilder, ExtendedTag, Tag, old_query, s, schema_input, _ref2, _ref3, _ref4, _ref5, _ref6;
      var _this = this;
      if (opts == null) opts = {};
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.ready = __bind(this.ready, this);
      this.end = __bind(this.end, this);
      this.remove = __bind(this.remove, this);
      this.register = __bind(this.register, this);
      if (typeof opts === 'function') {
        _ref2 = [opts, {}], template = _ref2[0], opts = _ref2[1];
      }
      this.opts = opts;
      if ((_ref3 = opts.encoding) == null) opts.encoding = 'utf-8';
      if ((_ref4 = opts.doctype) == null) opts.doctype = false;
      if ((_ref5 = opts.end) == null) opts.end = true;
      schema_input = opts.schema;
      s = aliases[schema_input] || schema_input || 'xml';
      opts.self_closing = typeof self_closing[s] === "function" ? self_closing[s](opts) : void 0;
      opts.schema = typeof schema[s] === "function" ? schema[s](opts).split(' ') : void 0;
      Builder = (_ref6 = opts.Builder) != null ? _ref6 : DefaultBuilder;
      ExtendedBuilder = (function() {

        __extends(ExtendedBuilder, Builder);

        function ExtendedBuilder() {
          ExtendedBuilder.__super__.constructor.apply(this, arguments);
        }

        return ExtendedBuilder;

      })();
      ff(ExtendedBuilder.prototype, opts.schema);
      this.xml = new ExtendedBuilder(opts);
      this.xml.template = this;
      old_query = this.xml.query;
      this.xml.query = function(type, tag, key) {
        var _ref7;
        if (type === 'tag') {
          return (_ref7 = key.xml) != null ? _ref7 : key;
        } else {
          return old_query.call(this, type, tag, key);
        }
      };
      Tag = this.xml.Tag;
      ExtendedTag = (function() {

        __extends(ExtendedTag, Tag);

        function ExtendedTag() {
          ExtendedTag.__super__.constructor.apply(this, arguments);
        }

        return ExtendedTag;

      })();
      ff(ExtendedTag.prototype, opts.schema);
      this.xml.Tag = this.xml.opts.Tag = ExtendedTag;
      this.xml.register('end', function(tag, next) {
        if (!(opts.self_closing === true || opts.self_closing.match(tag.name))) {
          tag.isempty = false;
        }
        return next(tag);
      });
      EVENTS.forEach(function(event) {
        return _this.xml.on(event, function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _this.emit.apply(_this, [event].concat(__slice.call(args)));
        });
      });
      process.nextTick(function() {
        var d, dt;
        if (opts.doctype === true) opts.doctype = 'html';
        d = aliases[opts.doctype] || opts.doctype;
        if (opts.doctype && (dt = typeof doctype[d] === "function" ? doctype[d](opts) : void 0)) {
          if (opts.pretty) dt += "\n";
          _this.xml.emit('data', _this.xml, dt);
        }
        if (typeof template === 'function') {
          template.call(_this.xml);
          if (opts.end) return _this.end();
        } else {
          return _this.end(template);
        }
      });
    }

    Template.prototype.toString = function() {
      return "[object Template]";
    };

    Template.prototype.register = function() {
      var _ref2;
      return (_ref2 = this.xml).register.apply(_ref2, arguments);
    };

    Template.prototype.remove = function() {
      var _ref2;
      return (_ref2 = this.xml).remove.apply(_ref2, arguments);
    };

    Template.prototype.end = function() {
      var _ref2;
      return (_ref2 = this.xml).end.apply(_ref2, arguments);
    };

    Template.prototype.ready = function() {
      var _ref2;
      return (_ref2 = this.xml).ready.apply(_ref2, arguments);
    };

    Template.prototype.show = function() {
      var _ref2;
      return (_ref2 = this.xml).show.apply(_ref2, arguments);
    };

    Template.prototype.hide = function() {
      var _ref2;
      return (_ref2 = this.xml).hide.apply(_ref2, arguments);
    };

    return Template;

  })();

  Template.schema = schema;

  Template.doctype = doctype;

  Template.self_closing = self_closing;

  Template.aliases = aliases;

  module.exports = Template;

}).call(this);
