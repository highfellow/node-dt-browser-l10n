(function() {
  var $fyBuilder, BrowserAdapter, JQueryAdapter, defaultfn, defineJQueryAPI, jqueryify;
  var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  BrowserAdapter = require('dt-browser').Adapter;

  defaultfn = require('./fn');

  defineJQueryAPI = function(el) {
    el.__defineGetter__('selector', function() {
      return el._jquery.selector;
    });
    return el.__defineGetter__('context', function() {
      return el._jquery.context;
    });
  };

  $fyBuilder = function(builder) {
    var $builder;
    $builder = builder._jquery;
    builder.jquery = $builder;
    builder.template.jquery = $builder;
    builder.template._jquery = $builder;
    defineJQueryAPI(builder.template);
    return defineJQueryAPI(builder);
  };

  JQueryAdapter = (function() {

    __extends(JQueryAdapter, BrowserAdapter);

    function JQueryAdapter(template, opts) {
      var f, n, _base, _ref, _ref2, _ref3, _ref4, _ref5;
      this.template = template;
      if (opts == null) opts = {};
      if ((_ref = this.$) == null) {
        this.$ = (_ref2 = (_ref3 = opts.jquery) != null ? _ref3 : opts.$) != null ? _ref2 : typeof window !== "undefined" && window !== null ? window.$ : void 0;
      }
      if ((_ref4 = this.fn) == null) this.fn = {};
      for (n in defaultfn) {
        f = defaultfn[n];
        if ((_ref5 = (_base = this.fn)[n]) == null) _base[n] = f.bind(this);
      }
      JQueryAdapter.__super__.constructor.apply(this, arguments);
      this.patch_fn();
    }

    JQueryAdapter.prototype.initialize = function() {
      var old_query;
      JQueryAdapter.__super__.initialize.apply(this, arguments);
      old_query = this.builder.query;
      return this.builder.query = function(type, tag, key) {
        var attr, attrs, domel, _i, _len, _ref;
        if (tag._jquery == null) return old_query.call(this, type, tag, key);
        if (type === 'attr') {
          return tag._jquery.attr(key);
        } else if (type === 'text') {
          return tag._jquery.text();
        } else if (type === 'tag') {
          if (key._jquery != null) {
            return key;
          } else {
            if ((domel = key[0]) != null) {
              attrs = {};
              _ref = domel.attributes;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                attr = _ref[_i];
                attrs[attr.name] = attr.value;
              }
              return new this.builder.Tag(domel.nodeName.toLowerCase(), attrs, function() {
                this._jquery = key;
                return this.end();
              });
            } else {
              return old_query.call(this, type, tag, key);
            }
          }
        }
      };
    };

    JQueryAdapter.prototype.patch_fn = function() {
      var fnadd, fnreplace;
      fnadd = this.fn.add;
      this.fn.add = function(parent, el) {
        var parpar, res;
        res = fnadd(parent, el);
        parpar = parent.parent;
        if ((parpar != null) && parpar === parpar.builder) $fyBuilder(parpar);
        if (parent === parent.builder) $fyBuilder(parent);
        return res;
      };
      fnreplace = this.fn.replace;
      return this.fn.replace = function(oldtag, newtag) {
        var res;
        res = fnreplace(oldtag, newtag);
        if (newtag === newtag.builder) $fyBuilder(newtag);
        return res;
      };
    };

    JQueryAdapter.prototype.make = function(el) {
      var _ref, _ref2, _ref3, _ref4;
      if (el === el.builder) {
        if ((_ref = el._jquery) == null) {
          el._jquery = this.$([], (_ref2 = el.parent) != null ? _ref2._jquery : void 0);
        }
        return $fyBuilder(el);
      } else {
        if ((_ref3 = el._jquery) == null) {
          el._jquery = this.$(el.toString(), (_ref4 = el.parent) != null ? _ref4._jquery : void 0);
        }
        return defineJQueryAPI(el);
      }
    };

    JQueryAdapter.prototype.createPlaceholder = function(el) {
      el._jquery = this.$('<placeholder>', el.parent._jquery);
      return $fyBuilder(el);
    };

    JQueryAdapter.prototype.removePlaceholder = function(el) {
      el._jquery = el._jquery.not(':first');
      return $fyBuilder(el);
    };

    JQueryAdapter.prototype.onshow = function(el) {
      if (el._jquery != null) {
        return JQueryAdapter.__super__.onshow.apply(this, arguments);
      }
    };

    JQueryAdapter.prototype.onhide = function(el) {
      if (el._jquery != null) {
        return JQueryAdapter.__super__.onhide.apply(this, arguments);
      }
    };

    JQueryAdapter.prototype.onremove = function(el, opts) {
      if (el._jquery != null) {
        JQueryAdapter.__super__.onremove.apply(this, arguments);
      }
      if (!opts.soft) return delete el._jquery;
    };

    JQueryAdapter.prototype.onend = function() {
      this.template.jquery = this.template._jquery = this.builder._jquery;
      return defineJQueryAPI(this.template);
    };

    return JQueryAdapter;

  })();

  jqueryify = function(opts, tpl) {
    var _ref;
    if (tpl == null) _ref = [opts, null], tpl = _ref[0], opts = _ref[1];
    new JQueryAdapter(tpl, opts);
    return tpl;
  };

  jqueryify.fn = defaultfn;

  jqueryify.Adapter = JQueryAdapter;

  module.exports = jqueryify;

  if (process.title === 'browser') {
    (function() {
      if (this.dynamictemplate != null) {
        return this.dynamictemplate.jqueryify = jqueryify;
      } else {
        return this.dynamictemplate = {
          jqueryify: jqueryify
        };
      }
    }).call(window);
  }

}).call(this);
