(function() {
  var Animation, BrowserAdapter, BrowserState, Callback, CancelableCallbacks, DeferredCallbacks, EVENTS, SHARED, defaultfn, isArray, prepare_cancelable_manip, prepare_deferred_done, removed, _ref;

  Animation = require('animation').Animation;

  _ref = require('./util'), Callback = _ref.Callback, CancelableCallbacks = _ref.CancelableCallbacks, DeferredCallbacks = _ref.DeferredCallbacks, removed = _ref.removed;

  isArray = Array.isArray;

  SHARED = ['parent_done', 'insert', 'replace', 'done'];

  EVENTS = ['add', 'end', 'show', 'hide', 'attr', 'text', 'raw', 'remove', 'replace'];

  defaultfn = {};

  EVENTS.forEach(function(e) {
    return defaultfn[e] = function() {
      throw new Error("no specific fn for " + e + " defined");
    };
  });

  prepare_deferred_done = function(el) {
    var _base, _ref2, _ref3;
    return (_ref2 = (_base = ((_ref3 = el._browser) != null ? _ref3 : el._browser = new BrowserState)).done) != null ? _ref2 : _base.done = new DeferredCallbacks;
  };

  prepare_cancelable_manip = function(el, canceled) {
    var _base, _ref2, _ref3;
    return (_ref2 = (_base = ((_ref3 = el._browser) != null ? _ref3 : el._browser = new BrowserState)).manip) != null ? _ref2 : _base.manip = new CancelableCallbacks(canceled);
  };

  BrowserState = (function() {

    function BrowserState() {}

    BrowserState.prototype.initialize = function(prev) {
      var _ref2, _ref3, _ref4, _ref5;
      if ((_ref2 = this.parent_done) == null) this.parent_done = new Callback;
      if ((_ref3 = this.insert) == null) this.insert = new Callback;
      if ((_ref4 = this.manip) == null) this.manip = new CancelableCallbacks;
      if ((_ref5 = this.done) == null) this.done = new DeferredCallbacks;
      this.initialized = true;
      this.manip.reset();
      return this;
    };

    BrowserState.prototype.mergeInto = function(state) {
      var key, _i, _len, _ref2;
      for (_i = 0, _len = SHARED.length; _i < _len; _i++) {
        key = SHARED[_i];
        if ((_ref2 = state[key]) == null) state[key] = this[key];
        this[key] = null;
      }
      return state;
    };

    BrowserState.prototype.destroy = function(opts) {
      var key, _i, _j, _len, _len2, _ref2, _ref3, _ref4, _ref5, _ref6;
      if ((_ref2 = this.parent_done) != null) {
        if (typeof _ref2.use === "function") _ref2.use(null).replace(null);
      }
      if ((_ref3 = this.manip) != null) _ref3.cancel();
      if ((_ref4 = this.done) != null) _ref4.reset();
      if (opts.soft) {
        for (_i = 0, _len = SHARED.length; _i < _len; _i++) {
          key = SHARED[_i];
          this[key] = null;
        }
      } else {
        if ((_ref5 = this.insert) != null) {
          if (typeof _ref5.use === "function") _ref5.use(null).replace(null);
        }
        if ((_ref6 = this.replace) != null) {
          if (typeof _ref6.use === "function") _ref6.use(null).replace(null);
        }
        for (_j = 0, _len2 = SHARED.length; _j < _len2; _j++) {
          key = SHARED[_j];
          delete this[key];
        }
        delete manip;
      }
      return this;
    };

    return BrowserState;

  })();

  BrowserAdapter = (function() {

    function BrowserAdapter(template, opts) {
      var f, n, plugin, _base, _i, _len, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      this.template = template;
      if (opts == null) opts = {};
      this.builder = (_ref2 = this.template.xml) != null ? _ref2 : this.template;
      if ((_ref3 = opts.timeoutexecution) == null) opts.timeoutexecution = '32ms';
      if ((_ref4 = opts.execution) == null) opts.execution = '8ms';
      if ((_ref5 = opts.timeout) == null) opts.timeout = '120ms';
      if ((_ref6 = opts.toggle) == null) opts.toggle = true;
      this.animation = new Animation(opts);
      this.animation.start();
      if ((_ref7 = this.fn) == null) this.fn = {};
      for (n in defaultfn) {
        f = defaultfn[n];
        if ((_ref8 = (_base = this.fn)[n]) == null) _base[n] = f.bind(this);
      }
      this.initialize();
      if ((_ref9 = opts.use) == null) opts.use = [];
      if (!isArray(opts.use)) opts.use = [opts.use];
      _ref10 = opts.use;
      for (_i = 0, _len = _ref10.length; _i < _len; _i++) {
        plugin = _ref10[_i];
        this.use(plugin);
      }
    }

    BrowserAdapter.prototype.initialize = function() {
      this.listen();
      this.make(this.builder);
      prepare_deferred_done(this.builder).callback()();
      this.template.register('ready', function(tag, next) {
        var _ref2;
        if ((_ref2 = tag._browser) == null) tag._browser = new BrowserState;
        if (tag._browser.ready === true) {
          return next(tag);
        } else {
          return tag._browser.ready = next;
        }
      });
      return this;
    };

    BrowserAdapter.prototype.use = function(plugin) {
      if (plugin != null) plugin.call(this, this);
      return this;
    };

    BrowserAdapter.prototype.listen = function() {
      var event, listener, _i, _len;
      for (_i = 0, _len = EVENTS.length; _i < _len; _i++) {
        event = EVENTS[_i];
        if ((listener = this["on" + event]) != null) {
          this.template.on(event, listener.bind(this));
        }
      }
      return this;
    };

    BrowserAdapter.prototype.make = function() {
      throw new Error("Adapter::make not defined.");
    };

    BrowserAdapter.prototype.createPlaceholder = function() {
      throw new Error("Adapter::createPlaceholder not defined.");
    };

    BrowserAdapter.prototype.removePlaceholder = function() {
      throw new Error("Adapter::removePlaceholder not defined.");
    };

    BrowserAdapter.prototype.onadd = function(parent, el) {
      var cb, ecb, pcb, that, _base, _base2, _base3, _base4, _ref2, _ref3, _ref4;
      if (removed(el) || removed(parent)) return;
      this.make(el);
      that = this;
      ((_ref2 = el._browser) != null ? _ref2 : el._browser = new BrowserState).initialize();
      while ((cb = el._browser.manip.callbacks.shift()) != null) {
        this.animation.push(cb);
      }
      prepare_deferred_done(parent);
      if (!el.parent._browser.initialized && (parent.parent != null)) {
        this.onadd(parent.parent, parent);
      }
      ecb = el._browser.done.callback();
      pcb = parent._browser.done.callback();
      if (el === el.builder) {
        ecb();
      } else {
        el.ready(ecb);
      }
      if (parent === parent.builder) {
        pcb();
      } else {
        parent.ready(pcb);
      }
      if (typeof (_base = el._browser.insert).replace === "function") {
        if ((_ref3 = (_base2 = _base.replace(el)).callback) == null) {
          _base2.callback = function() {
            if (removed(this) || removed(this.parent)) return;
            return that.insert_callback(this);
          };
        }
      }
      if (typeof (_base3 = el._browser.parent_done).replace === "function") {
        if ((_ref4 = (_base4 = _base3.replace(el)).callback) == null) {
          _base4.callback = function() {
            if (removed(this) || removed(this.parent)) return;
            return that.parent_done_callback(this);
          };
        }
      }
      return parent._browser.done.call(el._browser.parent_done.call);
    };

    BrowserAdapter.prototype.onreplace = function(oldtag, newtag) {
      var cb, oldreplacerequest, that, _base, _base2, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      if (removed(oldtag) || removed(newtag)) return;
      if ((_ref2 = newtag._browser) == null) newtag._browser = new BrowserState;
      if ((_ref3 = oldtag._browser) != null) _ref3.mergeInto(newtag._browser);
      this.onadd(oldtag.parent, newtag);
      if ((_ref4 = oldtag._browser) != null) {
        _ref4.destroy({
          soft: true
        });
      }
      while ((cb = newtag._browser.manip.callbacks.shift()) != null) {
        this.animation.push(cb);
      }
      if (newtag._browser.insert === true) {
        that = this;
        oldreplacerequest = ((_ref5 = newtag._browser.replace) != null ? _ref5.callback : void 0) != null;
        if ((_ref6 = (_base = newtag._browser).replace) == null) {
          _base.replace = new Callback;
        }
        if ((_ref7 = (_base2 = newtag._browser.replace.replace(newtag)).callback) == null) {
          _base2.callback = function() {
            if (removed(this) || removed(this.parent)) return;
            return that.replace_callback(oldtag, this);
          };
        }
        if (!oldreplacerequest) {
          return this.animation.push(newtag._browser.replace.call);
        }
      }
    };

    BrowserAdapter.prototype.ontext = function(el, text) {
      var _this = this;
      return this.animation.push(prepare_cancelable_manip(el, true).call(function() {
        return _this.fn.text(el, text);
      }));
    };

    BrowserAdapter.prototype.onraw = function(el, html) {
      var _this = this;
      return this.animation.push(prepare_cancelable_manip(el, true).call(function() {
        return _this.fn.raw(el, html);
      }));
    };

    BrowserAdapter.prototype.onattr = function(el, key, value) {
      var _this = this;
      return this.animation.push(prepare_cancelable_manip(el, true).call(function() {
        return _this.fn.attr(el, key, value);
      }));
    };

    BrowserAdapter.prototype.onshow = function(el) {
      return this.fn.show(el);
    };

    BrowserAdapter.prototype.onhide = function(el) {
      return this.fn.hide(el);
    };

    BrowserAdapter.prototype.onremove = function(el, opts) {
      var _ref2;
      this.fn.remove(el, opts);
      if ((_ref2 = el._browser) != null) _ref2.destroy(opts);
      if (!opts.soft) return delete el._browser;
    };

    BrowserAdapter.prototype.insert_callback = function(el) {
      var _base;
      if (el === el.builder && el.isempty) {
        el._browser.wrapped = true;
        this.createPlaceholder(el);
      }
      this.fn.add(el.parent, el);
      if (el.parent._browser.wrapped) {
        el.parent._browser.wrapped = false;
        this.removePlaceholder(el.parent);
      }
      if (typeof (_base = el._browser).ready === "function") _base.ready(el);
      el._browser.ready = true;
      return el._browser.insert = true;
    };

    BrowserAdapter.prototype.parent_done_callback = function(el) {
      var bool, _base, _ref2, _ref3, _ref4, _ref5;
      if (el.parent === el.parent.builder) {
        bool = !(el.parent.parent != null) || (el.parent.parent === ((_ref2 = el.parent.parent) != null ? _ref2.builder : void 0) && ((_ref3 = el.parent.parent) != null ? (_ref4 = _ref3._browser) != null ? _ref4.insert : void 0 : void 0) === true);
        if (bool && ((_ref5 = el.parent._browser) != null ? _ref5.insert : void 0) === true) {
          this.animation.push(el._browser.insert.call);
        } else {
          if (typeof (_base = el._browser.insert).call === "function") {
            _base.call();
          }
        }
      } else {
        this.animation.push(el._browser.insert.call);
      }
      return el._browser.parent_done = true;
    };

    BrowserAdapter.prototype.replace_callback = function(oldtag, newtag) {
      if (newtag === newtag.builder && newtag.isempty) {
        newtag._browser.wrapped = true;
        this.createPlaceholder(newtag);
      }
      this.fn.replace(oldtag, newtag);
      return newtag._browser.replace = null;
    };

    return BrowserAdapter;

  })();

  module.exports = {
    Adapter: BrowserAdapter,
    fn: defaultfn
  };

}).call(this);
