(function() {
  var Builder, EVENTS, EventEmitter, Tag, add_tag, connect_tags, new_attrs, new_tag, parse_args, safe, sync_tag, _ref;
  var __slice = Array.prototype.slice, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; }, __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  _ref = require('./util'), new_attrs = _ref.new_attrs, safe = _ref.safe;

  EVENTS = ['add', 'attr', 'data', 'text', 'raw', 'show', 'hide', 'remove', 'replace', 'close'];

  parse_args = function(name, attrs, children, opts) {
    var _ref2;
    if (typeof attrs !== 'object') {
      _ref2 = [children, attrs, {}], opts = _ref2[0], children = _ref2[1], attrs = _ref2[2];
    } else {
      if (attrs == null) attrs = {};
    }
    if (opts == null) opts = {};
    return [name, attrs, children, opts];
  };

  connect_tags = function(parent, child) {
    var dispose, listeners, pipe, remove, replace, wire;
    listeners = {};
    pipe = function(event) {
      if (listeners[event] != null) return;
      return typeof child.on === "function" ? child.on(event, listeners[event] = function() {
        return parent.emit.apply(parent, [event].concat(__slice.call(arguments)));
      }) : void 0;
    };
    wire = function() {
      var event, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = EVENTS.length; _i < _len; _i++) {
        event = EVENTS[_i];
        _results.push(pipe(event));
      }
      return _results;
    };
    dispose = function() {
      var event, listener, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = EVENTS.length; _i < _len; _i++) {
        event = EVENTS[_i];
        if ((listener = listeners[event]) != null) {
          if (typeof child.removeListener === "function") {
            child.removeListener(event, listener);
          }
          _results.push(listeners[event] = void 0);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    remove = function(soft, noremove) {
      if (this === child) {
        parent.removeListener('removed', remove);
        parent.removeListener('replaced', replace);
        child.removeListener('replaced', replace);
        return dispose();
      } else if (soft) {
        return parent.once('removed', remove);
      } else {
        child.removeListener('removed', remove);
        parent.removeListener('replaced', replace);
        child.removeListener('replaced', replace);
        dispose();
        if (!noremove) return child.remove();
      }
    };
    replace = function(tag) {
      if (this === child) {
        remove.call(parent, false, true);
        child = tag;
        wire();
      } else {
        parent.removeListener('removed', remove);
        parent = tag;
      }
      tag.once('replaced', replace);
      return tag.once('removed', remove);
    };
    wire();
    child.once('removed', remove);
    parent.once('removed', remove);
    child.once('replaced', replace);
    return parent.once('replaced', replace);
  };

  add_tag = function(newtag, callback) {
    var wire_tag;
    var _this = this;
    if (newtag == null) return callback != null ? callback.call(this) : void 0;
    wire_tag = function(_, tag) {
      var _ref2, _ref3;
      if ((_ref2 = tag.builder) == null) tag.builder = _this.builder;
      if ((_ref3 = tag.parent) == null) tag.parent = _this;
      tag.builder.opts.pretty = _this.builder.opts.pretty;
      tag.builder.level = _this.level;
      connect_tags(_this, tag);
      _this.emit('add', _this, tag);
      _this.emit('new', tag);
      _this.isempty = false;
      if (tag.closed) if (typeof tag.emit === "function") tag.emit('close', tag);
      return callback != null ? callback.call(_this, tag) : void 0;
    };
    newtag.parent = this;
    if (this.builder != null) {
      return this.builder.approve('new', this, newtag, wire_tag);
    } else {
      return wire_tag(this, newtag);
    }
  };

  new_tag = function() {
    var TagInstance, attrs, children, name, newtag, opts, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    _ref2 = parse_args.apply(null, arguments), name = _ref2[0], attrs = _ref2[1], children = _ref2[2], opts = _ref2[3];
    if ((_ref3 = opts.level) == null) opts.level = this.level + 1;
    if ((_ref4 = opts.pretty) == null) {
      opts.pretty = (_ref5 = this.builder) != null ? _ref5.opts.pretty : void 0;
    }
    opts.builder = this.builder;
    TagInstance = (_ref6 = (_ref7 = this.builder) != null ? _ref7.Tag : void 0) != null ? _ref6 : Tag;
    newtag = new TagInstance(name, attrs, null, opts);
    add_tag.call(this, newtag, function(tag) {
      if (children != null) return tag.children(children, opts);
    });
    return newtag;
  };

  sync_tag = function() {
    var attrs, children, name, opts, self_ending_children_scope, _ref2;
    _ref2 = parse_args.apply(null, arguments), name = _ref2[0], attrs = _ref2[1], children = _ref2[2], opts = _ref2[3];
    self_ending_children_scope = function() {
      this.children(children);
      return this.end();
    };
    return new_tag.call(this, name, attrs, self_ending_children_scope, opts);
  };

  Tag = (function() {

    __extends(Tag, EventEmitter);

    function Tag() {
      this.ready = __bind(this.ready, this);
      this.remove = __bind(this.remove, this);
      this.replace = __bind(this.replace, this);
      this.add = __bind(this.add, this);
      this.toString = __bind(this.toString, this);
      this.end = __bind(this.end, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.up = __bind(this.up, this);
      this.write = __bind(this.write, this);
      this.raw = __bind(this.raw, this);
      this.text = __bind(this.text, this);
      this.children = __bind(this.children, this);
      this.removeAttr = __bind(this.removeAttr, this);
      this.attr = __bind(this.attr, this);
      var children, opts, _ref2, _ref3, _ref4;
      _ref2 = parse_args.apply(null, arguments), this.name = _ref2[0], this.attrs = _ref2[1], children = _ref2[2], opts = _ref2[3];
      this.pretty = (_ref3 = opts.pretty) != null ? _ref3 : false;
      this.level = (_ref4 = opts.level) != null ? _ref4 : 0;
      this.builder = opts.builder;
      this.setMaxListeners(0);
      this.parent = this.builder;
      this.closed = false;
      this.writable = true;
      this.hidden = false;
      this.isready = false;
      this.isempty = true;
      this.content = "";
      this.children(children, opts);
      this.$tag = sync_tag;
      this.tag = new_tag;
    }

    Tag.prototype.attr = function(key, value) {
      var attr, k, v, _ref2;
      if (typeof key === 'string') {
        if (!(value != null)) {
          attr = (_ref2 = this.builder) != null ? _ref2.query('attr', this, key) : void 0;
          if (attr !== void 0) this.attrs[key] = attr;
          return attr;
        }
        this.attrs[key] = value;
        this.emit('attr', this, key, value);
      } else {
        for (k in key) {
          if (!__hasProp.call(key, k)) continue;
          v = key[k];
          if (v !== void 0) {
            this.attrs[k] = v;
          } else {
            delete this.attr[key];
          }
          this.emit('attr', this, k, v);
        }
      }
      return this;
    };

    Tag.prototype.removeAttr = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this.attrs[key];
        this.emit('attr', this, key, void 0);
      }
      return this;
    };

    Tag.prototype.children = function(children) {
      if (children == null) return this;
      if (typeof children === 'function') {
        children.call(this);
      } else {
        this.text(children);
      }
      return this;
    };

    Tag.prototype.text = function(content, opts) {
      var _ref2;
      if (opts == null) opts = {};
      if (content == null) {
        return this.content = (_ref2 = this.builder) != null ? _ref2.query('text', this) : void 0;
      }
      if (opts.escape) content = safe(content);
      if (opts.append) {
        this.content += content;
      } else {
        this.content = content;
      }
      this.emit('text', this, content);
      this.isempty = false;
      return this;
    };

    Tag.prototype.raw = function(html, opts) {
      if (opts == null) opts = {};
      this.emit('raw', this, html);
      this.isempty = false;
      return this;
    };

    Tag.prototype.write = function(content, _arg) {
      var append, escape, _ref2;
      _ref2 = _arg != null ? _arg : {}, escape = _ref2.escape, append = _ref2.append;
      if (escape) content = safe(content);
      if (content) this.emit('data', this, "" + content);
      if (append != null ? append : true) {
        this.content += content;
      } else {
        this.content = content;
      }
      this.isempty = false;
      return true;
    };

    Tag.prototype.up = function(opts) {
      var _ref2;
      if (opts == null) opts = {};
      if ((_ref2 = opts.end) == null) opts.end = true;
      if (opts.end) this.end.apply(this, arguments);
      return this.parent;
    };

    Tag.prototype.show = function() {
      this.hidden = false;
      this.emit('show', this);
      return this;
    };

    Tag.prototype.hide = function() {
      this.hidden = true;
      this.emit('hide', this);
      return this;
    };

    Tag.prototype.end = function() {
      var close_tag;
      var _this = this;
      if (!this.closed) {
        this.closed = 'approving';
        close_tag = function() {
          var set_ready;
          if (_this.isempty) {
            _this.closed = 'self';
          } else {
            _this.closed = true;
          }
          _this.emit('close', _this);
          _this.emit('end');
          _this.writable = false;
          set_ready = function() {
            _this.isready = true;
            return _this.emit('ready');
          };
          if (_this.builder != null) {
            return _this.builder.approve('ready', _this, set_ready);
          } else {
            return set_ready();
          }
        };
        if (this.builder != null) {
          this.builder.approve('end', this, close_tag);
        } else {
          close_tag(this, this);
        }
      } else if (this.closed === 'approving') {} else if (this.closed === 'removed') {
        this.emit('end');
        this.writable = false;
      } else {
        this.closed = true;
        this.writable = false;
      }
      return this;
    };

    Tag.prototype.toString = function() {
      return ("<" + this.name + (new_attrs(this.attrs))) + (this.closed === 'self' ? "/>" : this.closed ? ">" + this.content + "</" + this.name + ">" : ">" + this.content);
    };

    Tag.prototype.add = function(rawtag, callback) {
      var tag, _ref2;
      tag = (_ref2 = this.builder) != null ? _ref2.query('tag', this, rawtag) : void 0;
      if (!((tag != null) || (this.builder != null))) tag = rawtag;
      add_tag.call(this, tag, callback);
      return this;
    };

    Tag.prototype.replace = function(rawtag) {
      var tag, _ref2, _ref3, _ref4;
      tag = (_ref2 = this.builder) != null ? _ref2.query('tag', this, rawtag) : void 0;
      if (!((tag != null) || (this.builder != null))) tag = rawtag;
      if (this === tag) return this;
      if ((_ref3 = tag.parent) == null) tag.parent = this.parent;
      if ((_ref4 = tag.builder) == null) tag.builder = this.builder;
      this.emit('replace', this, tag);
      if (this.builder === tag.builder) this.builder = null;
      this.parent = null;
      this.emit('replaced', tag);
      return tag;
    };

    Tag.prototype.remove = function(opts) {
      if (opts == null) opts = {};
      if (!(this.closed || opts.soft)) this.closed = 'removed';
      this.emit('remove', this, opts);
      if (this !== this.builder) this.builder = null;
      this.parent = null;
      this.emit('removed', opts.soft);
      if (!opts.soft) this.removeAllListeners();
      return this;
    };

    Tag.prototype.ready = function(callback) {
      if (this.isready) {
        if (callback != null) callback.call(this);
        return this;
      }
      this.once('ready', callback);
      return this;
    };

    return Tag;

  })();

  Builder = (function() {

    __extends(Builder, EventEmitter);

    function Builder(opts) {
      var _base, _ref2, _ref3;
      this.opts = opts != null ? opts : {};
      this.ready = __bind(this.ready, this);
      this.end = __bind(this.end, this);
      this.add = __bind(this.add, this);
      this.show = this.show.bind(this);
      this.hide = this.hide.bind(this);
      this.remove = this.remove.bind(this);
      this.builder = this;
      this.checkers = {};
      this.closed = false;
      this.isempty = true;
      if ((_ref2 = (_base = this.opts).pretty) == null) _base.pretty = false;
      this.level = (_ref3 = this.opts.level) != null ? _ref3 : -1;
      this.setMaxListeners(0);
      this.Tag = Tag;
      this.tag = new_tag;
      this.$tag = sync_tag;
    }

    Builder.prototype.show = Tag.prototype.show;

    Builder.prototype.hide = Tag.prototype.hide;

    Builder.prototype.remove = Tag.prototype.remove;

    Builder.prototype.replace = Tag.prototype.replace;

    Builder.prototype.toString = function() {
      return "[object AsyncXMLBuilder]";
    };

    Builder.prototype.add = function(rawtag, callback) {
      var tag;
      tag = this.query('tag', this, rawtag);
      if (tag == null) tag = rawtag;
      add_tag.call(this, tag, callback);
      return this;
    };

    Builder.prototype.end = function() {
      this.closed = true;
      this.emit('close', this);
      this.emit('end');
      return this;
    };

    Builder.prototype.ready = function(callback) {
      if (this.closed === true) {
        return callback != null ? callback.call(this) : void 0;
      }
      return this.once('end', callback);
    };

    Builder.prototype.query = function(type, tag, key) {
      if (type === 'attr') {
        return tag.attrs[key];
      } else if (type === 'text') {
        return tag.content;
      } else if (type === 'tag') {
        return key;
      }
    };

    Builder.prototype.register = function(type, checker) {
      var _base, _ref2;
      if (!(type === 'new' || type === 'end' || type === 'ready')) {
        throw new Error("only type 'ready', 'new' or 'end' allowed.");
      }
      if ((_ref2 = (_base = this.checkers)[type]) == null) _base[type] = [];
      return this.checkers[type].push(checker);
    };

    Builder.prototype.approve = function(type, parent, tag, callback) {
      var checkers, next, _ref2, _ref3, _ref4;
      checkers = (_ref2 = (_ref3 = this.checkers[type]) != null ? typeof _ref3.slice === "function" ? _ref3.slice() : void 0 : void 0) != null ? _ref2 : [];
      switch (type) {
        case 'new':
          next = function(tag) {
            var checker, _ref4;
            checker = (_ref4 = checkers.shift()) != null ? _ref4 : callback;
            return checker(parent, tag, next);
          };
          break;
        case 'ready':
        case 'end':
          _ref4 = [tag, parent], callback = _ref4[0], tag = _ref4[1];
          next = function(tag) {
            var checker, _ref5;
            checker = (_ref5 = checkers.shift()) != null ? _ref5 : callback;
            return checker(tag, next);
          };
          break;
        default:
          throw new Error("type '" + type + "' not supported.");
      }
      return next(tag);
    };

    return Builder;

  })();

  module.exports = {
    Tag: Tag,
    Builder: Builder
  };

}).call(this);
